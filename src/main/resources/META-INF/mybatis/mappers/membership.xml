<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.helf.mapper.MembershipMapper">

	<select id="getMyMembershipsJoinById" parameterType="string" resultType="myMembershipJoin">
		select A.my_membership_no					as no,
			   A.my_membership_startdate			as startDate,
			   A.my_membership_enddate				as endDate,
			   A.my_membership_remainder_cnt		as remainderCnt,
			   A.my_membership_state				as state,
			   A.user_id							as "user.id",
			   B.membership_no						as membershipNo,
			   B.membership_name					as name,
			   C.period_type						as type
		from helf_my_membership A join helf_membership B 
            on A.membership_no = B.membership_no
        join helf_membership_period C 
            on A.period_no = C.period_no
		and A.user_id = #{value}
		and A.my_membership_state not in '사용불가'
		order by A.my_membership_no desc
	</select>
	
	<select id="getMyMembershipByNo" parameterType="int" resultType="myMembership">
		select my_membership_no					as no,
			   my_membership_startdate			as startDate,
			   my_membership_enddate			as endDate,
			   my_membership_remainder_cnt		as remainderCnt,
			   my_membership_state				as state,
			   user_id							as "user.id",
			   period_no						as "period.no",
			   membership_no					as "membership.no"
		from helf_my_membership
		where my_membership_no = #{value}
		order by my_membership_no desc
	</select>
	
	<select id="getMyOptionJoins" parameterType="int" resultType="myOptionJoin">
		select A.my_option_no			as no,
			   A.my_membership_no		as myMembershipNo,
			   C.option_name			as name,
			   A.my_option_price		as price
		from helf_membership_my_option A join helf_membership_option_detail B
			on A.detail_no = B.detail_no
		join helf_membership_option C
			on B.option_no = C.option_no 
		where my_membership_no = #{value}
	</select>
	
	<select id="getOrderByNo" parameterType="int" resultType="order">
		select orders_no					as no,
			   orders_total_price			as totalPrice,
			   orders_payment_date			as paymentDate,
			   orders_payment_state			as state,
			   user_id						as "user.id",
			   orders_membership_price		as membershipPrice,
			   my_membership_no				as "myMembership.no",
			   orders_surtax				as surtax
		from helf_orders
		where orders_no = #{value}
	</select>
	
	<select id="getOrderByMyMembershipNo" parameterType="int" resultType="order">
		select orders_no				as no,
			   orders_total_price		as totalPrice,
			   orders_payment_date		as paymentDate,
			   orders_payment_state		as state,
			   user_id					as "user.id",
			   orders_membership_price	as membershipPrice,
			   my_membership_no			as "myMembership.no",
			   orders_surtax			as surtax
		from helf_orders
		where my_membership_no = #{value}
	</select>
	
	<update id="updateOrder" parameterType="order">
		update helf_orders
		<set>
			orders_payment_state = #{state}
		</set>
		where orders_no = #{no}
	</update>
	
	<update id="updateMyMembership" parameterType="myMembership">
		update helf_my_membership
		<set>
			my_membership_remainder_cnt = #{remainderCnt},
			my_membership_state = #{state}
		</set>
		where my_membership_no = #{no}
	</update>
	
	<select id="getOrdersById" parameterType="map" resultType="orderJoin">
		select A.orders_no						as no,
			   A.orders_total_price				as totalPrice,
			   A.orders_payment_date			as paymentDate,
			   A.orders_payment_state			as orderState,
			   A.user_id						as "user.id",
			   B.my_membership_no				as membershipNo,
			   C.membership_no					as membershipNo,
			   C.membership_name				as name
		from (select row_number() over (orders_no) as rownumber,
					 orders_no,
					 orders_total_price,
					 orders_payment_date,
					 orders_payment_state,
					 my_membership_no,
					 user_id
			  from helf_orders) A join helf_my_membership B 
			  	on A.my_membership_no = B.my_membership_no
			  join helf_membership C
				on B.membership_no = C.membership_no
		and A.user_id = #{userId}
		and A.rownumber between #{begin} and #{end}
		<if test="state != null">
			and A.orders_payment_state = #{state}
		</if>
		<if test="type != null">
			<choose>
				<when test="type == 'name'">
					and C.membership_name like '%' || #{keyword} || '%'
				</when>
				<when test="type == 'no'">
					and A.orders_no like '%' || #{keyword} || '%'
				</when>
			</choose>
		</if>
		order by A.orders_no desc
	</select>
	
	<select id="getOrderByIdTotalRow" parameterType="map" resultType="int">
		select count(*)
		from helf_orders A join helf_my_membership B 
			on A.my_membership_no = B.my_membership_no
		join helf_membership C
			on B.membership_no = C.membership_no
		and A.user_id = #{userId}
		<if test="type != null">
			<choose>
				<when test="type == 'name'">
					and C.membership_name like '%' || #{keyword} || '%'
				</when>
				<when test="type == 'no'">
					and A.orders_no like '%' || #{keyword} || '%'
				</when>
			</choose>
		</if>
		<if test="state != null">
			and B.my_membership_state = #{state}
		</if>
	</select>
	
	<select id="getPointHistoryByNo" parameterType="int" resultType="pointHistory">
		select point_history_no		as no,
			   point_history_use	as usePoint,
			   point_history_date	as useDate,
			   user_id				as "user.id",
			   orders_no			as "order.no",
			   point_history_type	as type
		from helf_point_history
		where point_history_no = #{value}
	</select>

	<select id="getPointHistoryByOrderNo" parameterType="int" resultType="pointHistory">
		select point_history_no		as no,
			   point_history_use	as usePoint,
			   point_history_date	as useDate,
			   user_id				as "user.id",
			   orders_no			as "order.no",
			   point_history_type	as type
		from helf_point_history
		where orders_no = #{value}
	</select>
	
	<select id="getOrderJoinByNo" parameterType="int" resultType="orderJoin">
		select A.orders_no						as no,
			   A.orders_total_price				as totalPrice,
			   A.orders_payment_state			as orderState,
			   A.user_id						as "user.id",
			   A.orders_membership_price		as membershipPrice,
			   A.orders_surtax					as surtax,
			   B.my_membership_no				as myMembershipNo,
			   B.my_membership_startdate		as startDate,
			   B.my_membership_enddate			as endDate,
			   B.my_membership_remainder_cnt	as remainderCnt,
			   B.my_membership_state			as myMembershipState,
			   B.period_no						as "period.no",
			   C.membership_no					as membershipNo,
			   C.membership_name				as name
		from helf_orders A join helf_my_membership B 
			on A.my_membership_no = B.my_membership_no
		join helf_membership C
			on B.membership_no = C.membership_no
		and A.orders_no = #{value}
	</select>
	
	<select id="getCategorys" resultType="cat">
		select category_no				as no,
			   category_name			as name,
			   category_property		as property,
			   category_use_option		as useOption
		from helf_membership_category
	</select>
	
	<select id="getcategoryByNo" parameterType="int" resultType="cat">
		select category_no				as no,
			   category_name			as name,
			   category_property		as property,
			   category_use_option		as useOption
		from helf_membership_category
		where category_no = #{value}
	</select>
	
	<insert id="insertMembership" parameterType="membership">
		insert into helf_membership
			(membership_no, membership_name, membership_description,
			 category_no, membership_price)
		values
			(helf_membership_seq.nextval, #{name}, #{description}, #{category.no}, #{price})
	</insert>
	
	<select id="getMemberships" parameterType="map" resultType="membershipJoinCat">
		select A.membership_no				as no,
			   A.membership_name			as name,
			   A.membership_description		as description,
			   A.membership_delete			as deleted,
			   A.membership_price			as price,
			   A.membership_create_date		as createDate,
			   A.membership_delete_date		as deleteDate,
			   B.category_no				as catNo,
			   B.category_name				as catName,
			   B.category_property			as catProperty,
			   B.category_use_option		as useOption
		from (select row_number() over (membership_no) as rownumber,
					 membership_no,
					 membership_name,
					 membership_description,
					 membership_delete,
					 category_no,
					 membership_price,
					 membership_create_date,
					 membership_delete_date
			  from helf_membership) A join helf_membership_category B
			on A.category_no = B.category_no
		and A.rownumber between #{begin} and #{end}
		<if test="state != null">
			and A.membership_delete = #{state}
		</if>
		<if test="type != null">
			<choose>
				<when test="type == 'name'">
					and A.membership_name like '%' || #{keyword} || '%'
				</when>
				<when test="type == 'no'">
					and A.membership_no like '%' || #{keyword} || '%'
				</when>
			</choose>
		</if>
		order by A.membership_no desc
	</select>
	
	<select id="getMembershipTotalRow" parameterType="map" resultType="int">
		select count(*)
		from helf_membership A join helf_membership_category B
			on A.category_no = B.category_no
		<if test="type != null">
			<choose>
				<when test="type == 'name'">
					and A.membership_name like '%' || #{keyword} || '%'
				</when>
				<when test="type == 'no'">
					and A.membership_no like '%' || #{keyword} || '%'
				</when>
			</choose>
		</if>
		<if test="state != null">
			and A.membership_delete = #{state}
		</if>
	</select>
	
	<update id="updateMembership" parameterType="membership">
		update helf_membership
		<set>
			membership_name	= #{name},
			membership_description = #{description},
			membership_delete = #{deleted},
			category_no = #{category.no},
			membership_price = #{price},
			membership_delete_date = #{deleteDate}
		</set>
		where membership_no = #{no}
	</update>
	
	<select id="getOrders" parameterType="map" resultType="orderJoin">
		select A.orders_no						as no,
			   A.orders_payment_state			as orderState,
			   A.user_id						as "user.id",
			   C.refund_no						as refundNo,
			   D.membership_name				as name
		from (select row_number() over (orders_no) as rownumber,
					 orders_no,
					 orders_total_price,
					 orders_payment_date,
					 orders_payment_state,
					 user_id,
					 orders_membership_price,
					 my_membership_no,
					 orders_surtax
			  from helf_orders) A 
		join helf_my_membership B 
			on A.my_membership_no = B.my_membership_no
		join helf_membership_refund C 
			on A.orders_no = C.orders_no
		join helf_membership D
			on B.membership_no = D.membership_no
		and A.rownumber between #{begin} and #{end}
		<if test="state != null">
			and A.orders_payment_state = #{state}
		</if>
		<if test="id != null">
			and user_id = #{id}
		</if>
		<if test="type != null">
			<choose>
				<when test="type == 'refundNo'">
					and C.refund_no = #{keyword}
				</when>
				<when test="type == 'name'">
					and D.membership_name like '%' || #{keyword} || '%'
				</when>
			</choose>
		</if>
		order by A.orders_no desc
	</select>
	
	<select id="getOrderTotalRow" parameterType="map" resultType="int">
		select count(*)
		from helf_orders A
		join helf_my_membership B 
			on A.my_membership_no = B.my_membership_no
		join helf_membership_refund C 
			on A.orders_no = C.orders_no
		join helf_membership D
			on B.membership_no = D.membership_no
		<if test="type != null">
			<choose>
				<when test="type == 'refundNo'">
					and C.refund_no = #{keyword}
				</when>
				<when test="type == 'name'">
					and D.membership_name like '%' || #{keyword} || '%'
				</when>
			</choose>
		</if>
		<if test="state != null">
			and A.orders_payment_state = #{state}
		</if>
	</select>
	
	<insert id="insertRefundByNo" parameterType="refund">
		insert into helf_membership_refund
			(refund_no, orders_no, refund_amount)
		values
			(helf_membership_refund_seq.nextval, #{order.no}, #{amount})
	</insert>

	<delete id="deleteRefund" parameterType="int">
		delete from helf_membership_refund
		where orders_no = #{value}
	</delete>
	
	<select id="getRefundDetailByNo" parameterType="int" resultType="orderJoin">
		select A.orders_no						as no,
			   A.orders_total_price				as totalPrice,
			   A.orders_payment_date			as paymentDate,
			   A.orders_payment_state			as orderState,
			   A.user_id						as "user.id",
			   A.orders_membership_price		as membershipPrice,
			   A.orders_surtax					as surtax,
			   B.my_membership_no				as myMembershipNo,
			   B.my_membership_startdate		as startDate,
			   B.my_membership_enddate			as endDate,
			   B.my_membership_remainder_cnt	as remainderCnt,
			   B.my_membership_state			as myMembershipState,
			   B.period_no						as "period.no",
			   C.refund_no						as refundNo,
			   C.refund_state					as refundState,
			   C.refund_amount					as refundAmount,
			   C.refund_date					as refundDate,
			   D.membership_no					as membershipNo,
			   D.membership_name				as name
		from helf_orders A join helf_my_membership B 
			on A.my_membership_no = B.my_membership_no
		join helf_membership_refund C 
			on A.orders_no = C.orders_no
		join helf_membership D
			on B.membership_no = D.membership_no
		and A.orders_no = #{value}
	</select>
	
	<select id="getRefundByNo" parameterType="int" resultType="refund">
		select refund_no		as no,
			   refund_state		as state,
			   refund_amount	as amount,
			   orders_no		as "order.no",
			   refund_date		as refundDate
		from helf_membership_refund
		where refund_no = #{value}
	</select>

	<select id="getRefundByOrderNo" parameterType="int" resultType="refund">
		select refund_no		as no,
			   refund_state		as state,
			   refund_amount	as amount,
			   orders_no		as "order.no",
			   refund_date		as refundDate
		from helf_membership_refund
		where orders_no = #{value}
	</select>
	
	<update id="updateRefund" parameterType="refund">
		update helf_membership_refund
		<set>
			refund_state = #{state},
			refund_amount = #{amount}
		</set>
		where refund_no = #{no}
	</update>
	
	<update id="updatePointHistory" parameterType="pointHistory">
		update helf_point_history
		<set>
			point_history_date = sysdate,
			point_history_type = #{type}
		</set>
		where point_history_no = #{no}
	</update>
	
<!-- 	<select id="getOrderByNoList" parameterType="List" resultType="order">
		select *
		from helf_orders
		where 1=1
		<if test="noList != null and !noList.isEmpty()">
			and orders_no in 
			<foreach collection="noList" item="no" open="(" close=")" separator=",">
				#{no}
			</foreach>
		</if> 
	</select> -->
	
	<select id="getOrderByNoList" parameterType="List" resultType="refundOrderPoint">
		select
			A.orders_no	as orderId,
			B.point_history_no as pointNo,
			B.point_history_type as pointType, 
			B.point_history_use as pointUse, 
			C.user_point as userPoint, 
			C.user_id as userId,
            D.refund_no as refundNo
        from helf_orders A join helf_point_history B
		    on A.orders_no = B.orders_no
		join helf_users C
		    on A.user_id = C.user_id
		join helf_membership_refund D
			on A.orders_no = D.orders_no
		where 1=1
		<if test="noList != null and !noList.isEmpty()">
			and A.orders_no in 
			<foreach collection="noList" item="no" open="(" close=")" separator=",">
				#{no}
			</foreach>
		</if> 
	</select>
	
	<update id="updateRefundUserPoint" parameterType="map">
	update helf_users
	set helf_users.user_point = #{point}
	where helf_users.user_id = #{id}
	</update>
	
	<update id="updateRefundOrderState" parameterType="list">
	update helf_orders
	set ORDERS_PAYMENT_STATE = '환불완료'
	where ORDERS_NO in 
	<foreach collection="orderIds" item="id" open="(" close=")" separator=",">
				#{id}
	</foreach>
	</update>
	
	<update id="updateRefundPointState" parameterType="map">
		update helf_point_history
		set point_history_type = #{type}
		where point_history_no in 
		<foreach collection="pointIds" item="id" open="(" close=")" separator=",">
			#{id}
		</foreach>
	</update>

	<update id="updateRefundState" parameterType="list">
		update helf_membership_refund
		set refund_state = 'Y'
		where refund_no in
		<foreach collection="refundNoList" item="no" open="(" close=")" separator=",">
			#{no}
		</foreach>
	</update>
</mapper>